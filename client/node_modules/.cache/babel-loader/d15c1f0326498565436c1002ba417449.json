{"ast":null,"code":"var _jsxFileName = \"/Users/dylantravis/Desktop/finalPush/oneclick/src/components/Match.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../css/Match.css\";\nimport MatchDisplay from \"./MatchDisplay\";\nimport CsvHeader from \"./CsvHeader\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Match = ({\n  file,\n  data,\n  backEndHeaders,\n  updateData,\n  updateHeader,\n  setFrame\n}) => {\n  _s();\n\n  const [headers, setHeaders] = useState([]);\n  const [errorRows, setErrorRows] = useState([]);\n  console.log(data.filter(row => !errorRows.includes(row)));\n  useEffect(() => {\n    const rowsWithMissingValues = data.filter(row => {\n      return Object.keys(row).some(prop => row[prop] === \"\");\n    });\n    setErrorRows(rowsWithMissingValues);\n  }, [data]);\n  useEffect(() => {\n    if (data.length > 0) {\n      const createHeaders = Object.keys(data[0]).map(header => {\n        // values might be not necessary\n        const values = data.map(row => {\n          return row[header];\n        });\n        const obj = {\n          name: header,\n          matchedWith: [],\n          confirmed: false,\n          values: values\n        };\n        return obj;\n      });\n      headerMatch(createHeaders);\n    }\n  }, [data]);\n\n  const headerMatch = list => {\n    const matching = list.map(header => {\n      const backendMatch = backEndHeaders.filter(item => {\n        return header.name === item.name || item.altNames.includes(header.name);\n      });\n      header.matchedWith = backendMatch[0] ? backendMatch[0].name : [];\n      return header;\n    });\n    setHeaders(matching);\n  };\n\n  const confirmHeader = (header, index) => {\n    header.confirmed = true;\n    const arr = [...headers];\n    arr.splice(index, 1, header);\n    setHeaders(arr);\n  };\n\n  if (file) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"match\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"match-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MatchDisplay, {\n        headers: headers,\n        errorRows: errorRows,\n        dataLength: data.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"match-main\",\n        children: headers.map((header, index) => {\n          return /*#__PURE__*/_jsxDEV(CsvHeader, {\n            header: header,\n            headers: headers,\n            confirmHeader: confirmHeader\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(Match, \"pCvOeevF/2eou/9gQQhNYRFakM0=\");\n\n_c = Match;\nexport default Match;\n\nvar _c;\n\n$RefreshReg$(_c, \"Match\");","map":{"version":3,"sources":["/Users/dylantravis/Desktop/finalPush/oneclick/src/components/Match.js"],"names":["React","useEffect","useState","MatchDisplay","CsvHeader","Redirect","Link","Match","file","data","backEndHeaders","updateData","updateHeader","setFrame","headers","setHeaders","errorRows","setErrorRows","console","log","filter","row","includes","rowsWithMissingValues","Object","keys","some","prop","length","createHeaders","map","header","values","obj","name","matchedWith","confirmed","headerMatch","list","matching","backendMatch","item","altNames","confirmHeader","index","arr","splice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../css/Match.css\";\nimport MatchDisplay from \"./MatchDisplay\";\nimport CsvHeader from \"./CsvHeader\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nconst Match = ({\n  file,\n  data,\n  backEndHeaders,\n  updateData,\n  updateHeader,\n  setFrame,\n}) => {\n  const [headers, setHeaders] = useState([]);\n  const [errorRows, setErrorRows] = useState([]);\n\n  console.log(data.filter((row) => !errorRows.includes(row)))\n\n  useEffect(() => {\n    const rowsWithMissingValues = data.filter((row) => {\n      return Object.keys(row).some((prop) => row[prop] === \"\");\n    });\n    setErrorRows(rowsWithMissingValues);\n  }, [data]);\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const createHeaders = Object.keys(data[0]).map((header) => {\n        // values might be not necessary\n        const values = data.map((row) => {\n          return row[header];\n        });\n        const obj = {\n          name: header,\n          matchedWith: [],\n          confirmed: false,\n          values: values,\n        };\n        return obj;\n      });\n      headerMatch(createHeaders);\n    }\n  }, [data]);\n\n  const headerMatch = (list) => {\n    const matching = list.map((header) => {\n      const backendMatch = backEndHeaders.filter((item) => {\n        return header.name === item.name || item.altNames.includes(header.name);\n      });\n      header.matchedWith = backendMatch[0] ? backendMatch[0].name : [];\n      return header;\n    });\n    setHeaders(matching);\n  };\n\n  const confirmHeader = (header, index) => {\n    header.confirmed = true;\n    const arr = [...headers];\n    arr.splice(index, 1, header);\n    setHeaders(arr);\n  };\n\n  if (file) {\n    return (\n      <div className=\"match\">\n        <div className=\"match-header\">\n          <h3>{file.name}</h3>\n        </div>\n        <MatchDisplay\n          headers={headers}\n          errorRows={errorRows}\n          dataLength={data.length}\n        />\n        <div className=\"match-main\">\n          {headers.map((header, index) => {\n            return (\n              <CsvHeader\n                key={index}\n                header={header}\n                headers={headers}\n                confirmHeader={confirmHeader}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  } else {\n    return <Redirect to=\"/\" />;\n  }\n};\n\nexport default Match;\n"]},"metadata":{},"sourceType":"module"}