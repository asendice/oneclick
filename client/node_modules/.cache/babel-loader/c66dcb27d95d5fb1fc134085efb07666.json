{"ast":null,"code":"var _jsxFileName = \"/Users/dylantravis/Desktop/finalPush/oneclick/src/components/FileDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../css/FileDisplay.css\";\nimport CsvHeader from \"./CsvHeader\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileDisplay = ({\n  file,\n  data\n}) => {\n  _s();\n\n  const [headers, setHeaders] = useState([]);\n  const [newData, setNewData] = useState([]);\n  const [newList, setNewList] = useState([]);\n  const [selectedHeader, setSelectedHeader] = useState({}); // console.log(headers, \"headers\");\n  // console.log(newList, \"newList\");\n\n  useEffect(() => {\n    if (data.length > 0) {\n      setHeaders(Object.keys(data[0])); // console.log(data, \"data\");\n\n      let newData = [data[1], data[2], data[3]];\n      setNewData(newData);\n    }\n  }, [data]);\n\n  const handleDragEnd = (result, {\n    destination,\n    source\n  }) => {\n    // console.log(\"from\", source);\n    // console.log(\"to\", destination);\n    console.log(result);\n    const items = headers;\n    const arr = newList;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      // if (destination.droppableId === \"headers\") {\n      //   console.log(\"headers\")\n      //   const [reorderedItem] = items.splice(source.index, 1);\n      //   items.splice(destination.index, 0, reorderedItem);\n      //   // console.log(items, \"items\");\n      //   setHeaders(items);\n      // }\n      // if (destination.droppableId === \"test\") {\n      //   const [reorderedItem] = arr.splice(source.index, 1);\n      //   arr.splice(destination.index, 0, reorderedItem);\n      //   // console.log(items, \"items\");\n      //   setNewList(arr);\n      // }\n      const [reorderedItem] = items.splice(source.index, 1);\n      items.splice(destination.index, 0, reorderedItem); // console.log(items, \"items\");\n\n      setHeaders(items);\n    }\n\n    if (source.droppableId === \"headers\" && destination.droppableId === \"test\") {\n      const [reorderedItem] = items.splice(source.index, 1);\n      items.splice(source.index, 1); // console.log(items, \"items\")\n\n      setHeaders(items);\n      arr.splice(destination.index, 0, reorderedItem);\n      setNewList(arr);\n    }\n\n    if (destination.droppableId === \"headers\" && source.droppableId === \"test\") {\n      const [reorderedItem] = arr.splice(source.index, 1);\n      arr.splice(source.index, 1);\n      setNewList(arr);\n      items.splice(destination.index, 0, reorderedItem);\n      setHeaders(items);\n    } // if (\n    //   result.destination.droppableId === \"headers\" &&\n    //   result.source.droppableId !== \"test\"\n    // ) {\n    //   arr.splice(result.source.index, 1);\n    //   setNewList(arr);\n    //   items.splice(result.destination.index, 0, reorderedItem);\n    //   setHeaders(items);\n    // }\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-header\",\n      children: file.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"headers\",\n          children: provided => {\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n              ref: provided.innerRef,\n              className: \"drop-zone\",\n              children: [headers.map((header, index) => {\n                console.log(header, \"item\");\n                return /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: header.toString(),\n                  index: index,\n                  children: provided => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      ref: provided.innerRef,\n                      onClick: () => setSelectedHeader({\n                        name: header,\n                        newData: newData\n                      }),\n                      children: /*#__PURE__*/_jsxDEV(CsvHeader, {\n                        header: header,\n                        newData: newData\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 124,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 113,\n                      columnNumber: 29\n                    }, this);\n                  }\n                }, header, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 23\n                }, this);\n              }), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"test\",\n          children: provided => {\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n              ref: provided.innerRef,\n              className: \"end-drop-zone\",\n              children: [newList.length > 0 ? newList.map((item, index) => {\n                console.log(item, \"item\");\n                return /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: item.toString(),\n                  index: index,\n                  children: provided => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      ref: provided.innerRef,\n                      children: /*#__PURE__*/_jsxDEV(CsvHeader, {\n                        header: item,\n                        newData: newData\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 161,\n                        columnNumber: 35\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 156,\n                      columnNumber: 33\n                    }, this);\n                  }\n                }, item, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 27\n                }, this);\n              }) : \"\", provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FileDisplay, \"cJBpjAYPPJ6sj62M1/KD0RVfYlk=\");\n\n_c = FileDisplay;\nexport default FileDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileDisplay\");","map":{"version":3,"sources":["/Users/dylantravis/Desktop/finalPush/oneclick/src/components/FileDisplay.js"],"names":["React","useEffect","useState","CsvHeader","DragDropContext","Droppable","Draggable","FileDisplay","file","data","headers","setHeaders","newData","setNewData","newList","setNewList","selectedHeader","setSelectedHeader","length","Object","keys","handleDragEnd","result","destination","source","console","log","items","arr","droppableId","reorderedItem","splice","index","name","provided","droppableProps","innerRef","map","header","toString","draggableProps","dragHandleProps","placeholder","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../css/FileDisplay.css\";\nimport CsvHeader from \"./CsvHeader\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst FileDisplay = ({ file, data }) => {\n  const [headers, setHeaders] = useState([]);\n  const [newData, setNewData] = useState([]);\n  const [newList, setNewList] = useState([]);\n  const [selectedHeader, setSelectedHeader] = useState({});\n\n  // console.log(headers, \"headers\");\n  // console.log(newList, \"newList\");\n\n  useEffect(() => {\n    if (data.length > 0) {\n      setHeaders(Object.keys(data[0]));\n      // console.log(data, \"data\");\n      let newData = [data[1], data[2], data[3]];\n      setNewData(newData);\n    }\n  }, [data]);\n\n  const handleDragEnd = (result, { destination, source }) => {\n    // console.log(\"from\", source);\n    // console.log(\"to\", destination);\n    console.log(result);\n    const items = headers;\n    const arr = newList;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      // if (destination.droppableId === \"headers\") {\n      //   console.log(\"headers\")\n      //   const [reorderedItem] = items.splice(source.index, 1);\n\n      //   items.splice(destination.index, 0, reorderedItem);\n      //   // console.log(items, \"items\");\n      //   setHeaders(items);\n      // }\n      // if (destination.droppableId === \"test\") {\n      //   const [reorderedItem] = arr.splice(source.index, 1);\n      //   arr.splice(destination.index, 0, reorderedItem);\n      //   // console.log(items, \"items\");\n      //   setNewList(arr);\n      // }\n\n      const [reorderedItem] = items.splice(source.index, 1);\n\n      items.splice(destination.index, 0, reorderedItem);\n      // console.log(items, \"items\");\n      setHeaders(items);\n    }\n\n    if (\n      source.droppableId === \"headers\" &&\n      destination.droppableId === \"test\"\n    ) {\n      const [reorderedItem] = items.splice(source.index, 1);\n      items.splice(source.index, 1);\n      // console.log(items, \"items\")\n      setHeaders(items);\n      arr.splice(destination.index, 0, reorderedItem);\n      setNewList(arr);\n    }\n    if (\n      destination.droppableId === \"headers\" &&\n      source.droppableId === \"test\"\n    ) {\n      const [reorderedItem] = arr.splice(source.index, 1);\n      arr.splice(source.index, 1);\n      setNewList(arr);\n      items.splice(destination.index, 0, reorderedItem);\n      setHeaders(items);\n    }\n    // if (\n    //   result.destination.droppableId === \"headers\" &&\n    //   result.source.droppableId !== \"test\"\n    // ) {\n    //   arr.splice(result.source.index, 1);\n    //   setNewList(arr);\n    //   items.splice(result.destination.index, 0, reorderedItem);\n    //   setHeaders(items);\n    // }\n  };\n\n  return (\n    <div className=\"file-display\">\n      <div className=\"file-header\">{file.name}</div>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <div className=\"main\">\n          <Droppable droppableId=\"headers\">\n            {(provided) => {\n              return (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  className=\"drop-zone\"\n                >\n                  {headers.map((header, index) => {\n                    console.log(header, \"item\");\n                    return (\n                      <Draggable\n                        key={header}\n                        draggableId={header.toString()}\n                        index={index}\n                      >\n                        {(provided) => {\n                          return (\n                            <div\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              ref={provided.innerRef}\n                              onClick={() =>\n                                setSelectedHeader({\n                                  name: header,\n                                  newData: newData,\n                                })\n                              }\n                            >\n                              <CsvHeader header={header} newData={newData} />\n                            </div>\n                          );\n                        }}\n                      </Draggable>\n                    );\n                  })}\n\n                  {provided.placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n          <Droppable droppableId=\"test\">\n            {(provided) => {\n              return (\n                <div\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  className=\"end-drop-zone\"\n                >\n                  {newList.length > 0\n                    ? newList.map((item, index) => {\n                        console.log(item, \"item\");\n                        return (\n                          <Draggable\n                            key={item}\n                            draggableId={item.toString()}\n                            index={index}\n                          >\n                            {(provided) => {\n                              return (\n                                <div\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  ref={provided.innerRef}\n                                >\n                                  <CsvHeader header={item} newData={newData} />\n                                </div>\n                              );\n                            }}\n                          </Draggable>\n                        );\n                      })\n                    : \"\"}\n                  {provided.placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default FileDisplay;\n"]},"metadata":{},"sourceType":"module"}